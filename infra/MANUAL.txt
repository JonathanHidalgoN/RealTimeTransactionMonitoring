This manual guide the necessary steps to run the app.

1 - Prerequisites:

    1. Azure Subscription
    2. Azure CLI
    3. Terraform CLI
2 - (Optional) Review Terraform Variables:
    In main check variables like region, etc.
3 - Terraform init
    run:
    1. terraform init -upgrade
    2. terraform plan -out=tfplan
    3. terraform apply tfplan
4 - Collect Outputs from Terraform:
    After apply is successful, Terraform will have created your resources. We need two key pieces of information:

    The Application Insights Connection String.
    The URI and Name of your new Azure Key Vault.
    Run these commands from the infra directory:

    terraform output application_insights_connection_string
    terraform output key_vault_uri
    terraform output key_vault_name

5 - Create Service Principal & Configure Application Secrets
    Applications will use a Service Principal (SP) to authenticate to Azure Key Vault.

    Create a Service Principal for the Application:
    Choose a descriptive name for your SP.

    az ad sp create-for-rbac --name "FinMonAppSP" --output json
    From the JSON output, securely copy and save these values:

    appId (this is your AZURE_CLIENT_ID)
    password (this is your AZURE_CLIENT_SECRET)
    tenant (this is your AZURE_TENANT_ID)
6 - Grant the Application SP Access to Key Vault:
    The SP needs permission to read secrets from the Key Vault provisioned by Terraform.
    SP_APP_ID="<your_sp_appId_here>" # Replace with the appId from above
    SP_OBJECT_ID=$(az ad sp show --id "${SP_APP_ID}" --query "id" -o tsv)
    echo "Service Principal Object ID: ${SP_OBJECT_ID}"
    Now, set an access policy on your Key Vault (use the Key Vault name you got from terraform output key_vault_name):
    KEY_VAULT_NAME="<your_key_vault_name_from_terraform_output>" # Replace
    az keyvault set-policy --name "${KEY_VAULT_NAME}" --object-id "${SP_OBJECT_ID}" --secret-permissions get list
7 - Add Secrets to Your Azure Key Vault:
    Use the SectionName--PropertyName convention for secret names:

    Application Insights Connection String:
        APP_INSIGHTS_CS="<your_app_insights_connection_string_from_terraform_output>"
        az keyvault secret set --vault-name "${KEY_VAULT_NAME}" --name "ApplicationInsights--ConnectionString" --value "${APP_INSIGHTS_CS}"
    Kafka Bootstrap Servers:
        az keyvault secret set --vault-name "${KEY_VAULT_NAME}" --name "Kafka--BootstrapServers" --value "<YOUR_SECRET>"
    Cosmos DB Endpoint URI (for emulator):
        az keyvault secret set --vault-name "${KEY_VAULT_NAME}" --name "CosmosDb--EndpointUri" --value "<YOUR_SECRET>"
    Cosmos DB Primary Key (for emulator):
        az keyvault secret set --vault-name "${KEY_VAULT_NAME}" --name "CosmosDb--PrimaryKey" --value "<YOUR_SECRET>"

8 - Configure Local Application Environment (.env file)
    Application (running via Docker Compose) needs to know how to connect to Key Vault.

    In the root directory update a file named .env
    KEY_VAULT_URI="<your_key_vault_uri_from_terraform_output>"
    AZURE_CLIENT_ID="<your_sp_appId_from_step_2.1>"
    AZURE_CLIENT_SECRET="<your_sp_password_from_step_2.1>"
    AZURE_TENANT_ID="<your_sp_tenantId_from_step_2.1>"
