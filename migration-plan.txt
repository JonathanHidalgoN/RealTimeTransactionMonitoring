================================================================================
🎯 COMPLETE MIGRATION PLAN: AKS → Container Apps
================================================================================

Project: Real-Time Financial Monitoring System
Goal: Simplify deployment for recruiter demos (click URL → see working app)
Time Estimate: 4-6 hours
Cost Reduction: $120-150/mo → $35-40/mo (70% savings)

================================================================================
PHASE 1: FILES TO DELETE (Remove AKS/K8s complexity)
================================================================================

🗑️ TERRAFORM MODULES
--------------------
❌ platform/terraform/modules/aks/
   ├── main.tf
   ├── variables.tf
   └── outputs.tf

🗑️ KUBERNETES MANIFESTS (entire directory)
------------------------------------------
❌ k8s-manifest/
   ├── base/
   │   ├── 00-serviceaccount.yml
   │   ├── 01-namespace.yml
   │   ├── 02-processor-deployment.yml
   │   ├── 03-api-deployment-service.yml
   │   ├── 04-simulator-deployment.yml
   │   ├── 06-env-configmap.yml
   │   ├── 07-api-hpa.yml
   │   ├── 08-cluster-issuer.yml
   │   ├── 09-api-ingress.yml
   │   └── kustomization.yml
   └── overlays/
       ├── cloud/
       │   ├── kustomization.yml
       │   └── cloud-configmap-patch.yaml
       └── local/
           ├── kustomization.yml
           ├── external-services.yaml
           ├── local-api-secret.yaml
           ├── local-configmap-patch.yaml
           ├── local-images-patch.yaml
           ├── local-mongodb-secret.yaml
           ├── remove-cloud-resources.yaml
           └── simulator-deployment-patch.yaml

🗑️ AKS/K8S DEPLOYMENT SCRIPTS
-----------------------------
❌ scripts/cloudDeployment/install-cert-manager.sh
❌ scripts/cloudDeployment/setup-ingress-controller.sh
❌ scripts/generalUtils/update-k8s-manifests.sh
❌ scripts/generalUtils/update-configmap.sh
❌ scripts/generalUtils/cost-management.sh (AKS-specific)
❌ scripts/generalUtils/restart-workload-identity.sh
❌ scripts/generalUtils/switch-architecture.sh (old migration script)
❌ scripts/localDevelopmentAutomation/apply-k8s-individual.sh

🗑️ MAKEFILE
-----------
❌ Makefile (current 200+ line AKS-focused version)
   - Will be replaced with simplified 50-line version

================================================================================
PHASE 2: FILES TO CREATE
================================================================================

✅ NEW TERRAFORM MODULE: Container Apps
---------------------------------------
✅ platform/terraform/modules/container-apps/
   ├── main.tf              # Container Apps Environment + 3 apps
   ├── variables.tf         # Input variables
   └── outputs.tf           # API URL, processor URL

   Content: Container Apps Environment, API app, Processor app, Simulator app
   Features: Auto-scaling (0-3 replicas), managed identity, HTTPS ingress

✅ NEW TERRAFORM MODULE: Static Web App
---------------------------------------
✅ platform/terraform/modules/static-web-app/
   ├── main.tf              # Static Web Apps resource
   ├── variables.tf         # Input variables
   └── outputs.tf           # Frontend URL

   Content: Azure Static Web Apps for Blazor WebAssembly
   Features: Free tier, auto HTTPS, global CDN

✅ SIMPLIFIED DEPLOYMENT SCRIPTS
--------------------------------
✅ scripts/cloudDeployment/deploy-container-apps.sh
   - Simple script to trigger container app deployments
   - Restart apps if needed

✅ scripts/cloudDeployment/build-and-push-images.sh (simplified version)
   - Build Docker images
   - Push to ACR
   - No kubectl/K8s references

✅ NEW MAKEFILE (simplified)
---------------------------
✅ Makefile (30-50 lines, simple and clean)
   Commands:
   - make deploy     → Deploy everything to Azure
   - make destroy    → Destroy Azure infrastructure
   - make dev        → Start local docker-compose
   - make logs       → View application logs
   - make status     → Check deployment status
   - make test       → Run tests

✅ NEW GITHUB WORKFLOW (optional)
---------------------------------
✅ .github/workflows/deploy-container-apps.yml
   - CI/CD for Container Apps deployment
   - Simpler than AKS deployment

================================================================================
PHASE 3: FILES TO MODIFY
================================================================================

📝 TERRAFORM ENVIRONMENT CONFIG
-------------------------------
📝 platform/terraform/environments/dev/main.tf
   Changes:
   - Remove: module "aks_cluster"
   + Add: module "container_apps"
   + Add: module "static_web_app"
   - Update: Pass ACR outputs to container apps module
   - Update: Pass shared resources to modules

📝 TERRAFORM VARIABLES
---------------------
📝 platform/terraform/environments/dev/variables.tf
   Changes:
   - Remove: enable_cost_optimization (not needed)
   - Remove: alert_email_addresses (simplify)
   + Keep: everything else (resource_prefix, azure_location, etc.)

📝 TERRAFORM OUTPUTS
-------------------
📝 platform/terraform/environments/dev/outputs.tf
   Changes:
   - Remove: AKS cluster outputs (cluster_name, kubeconfig, etc.)
   + Add: output "api_url" { value = module.container_apps.api_url }
   + Add: output "processor_url" { value = module.container_apps.processor_url }
   + Add: output "frontend_url" { value = module.static_web_app.default_hostname }

📝 SECURITY MODULE (minor updates)
----------------------------------
📝 platform/terraform/modules/security/main.tf
   Changes:
   - Remove: AKS workload identity role assignments
   - Remove: Federated identity credentials
   + Keep: Key Vault, managed identities
   + Add: Container Apps managed identity role assignments (if needed)

📝 COSMOS MODULE (minimal changes)
----------------------------------
📝 platform/terraform/modules/cosmos/main.tf
   Changes:
   + Add: Role assignment for Container Apps managed identity
   - Keep: Everything else the same

📝 MONITORING MODULE
--------------------
📝 platform/terraform/modules/monitoring/main.tf
   Changes:
   - Remove: aks_cluster_id input variable
   + Add: container_apps_environment_id input variable
   - Update: Monitoring queries/dashboards

📝 DEPLOYMENT SCRIPTS
---------------------
📝 scripts/cloudDeployment/bootstrap.sh
   Changes:
   - Simplify: Remove AKS-specific steps
   - Remove: kubectl installation
   - Remove: AKS credentials setup

📝 scripts/cloudDeployment/setup_app_config.sh
   Changes:
   - Remove: kubectl/kubeconfig setup
   - Remove: Workload Identity federation
   - Simplify: Focus on ACR and basic config

📝 scripts/cloudDeployment/build-and-push-acr.sh
   Changes:
   - Keep mostly the same (ACR still used)
   - Remove: Any kubectl apply commands

📝 scripts/cloudDeployment/deploy-blazor-static-app.sh
   Changes:
   - Update: Use new Static Web App outputs from Terraform
   - Simplify: Direct deployment to Static Web Apps

📝 APPLICATION CODE (MINIMAL/NO CHANGES!)
-----------------------------------------
📝 src/FinancialMonitoring.Api/         ✅ No changes needed
📝 src/TransactionProcessor/            ✅ No changes needed
📝 src/TransactionSimulator/            ✅ No changes needed
📝 src/FinancialMonitoring.WebApp/      📝 Minor: Update API URL config

📝 DOCKER COMPOSE (improve for local dev)
-----------------------------------------
📝 docker-compose.yml
   Changes:
   + Improve: Better healthchecks
   + Improve: Clearer service dependencies
   + Optional: Add Blazor WebApp service

📝 DOCUMENTATION
----------------
📝 README.md
   Changes:
   - Update: Architecture diagrams (remove AKS, add Container Apps)
   - Update: Deployment instructions
   - Update: Cost estimates ($120/mo → $35/mo)
   - Update: Benefits section (emphasize simplicity)

📝 docs/deployment.md (if exists)
   Changes:
   - Complete rewrite: Simplified deployment guide
   - One command deployment: ./platform/deploy.sh -e dev
   - Remove: All kubectl/K8s references

📝 ENVIRONMENT VARIABLES
------------------------
📝 .env.example
   Changes:
   - Remove: AKS_CLUSTER_NAME
   - Remove: KAFKA-related (keep for local docker-compose only)
   + Add: CONTAINER_APPS_ENVIRONMENT (optional)
   + Keep: All Azure resource configs

================================================================================
PHASE 4: DETAILED FILE CONTENTS
================================================================================

The following section contains template code for key new files.
See full implementation details in the detailed plan or ask for specific files.

Key files to implement:
1. platform/terraform/modules/container-apps/main.tf (Container Apps resources)
2. platform/terraform/modules/container-apps/variables.tf
3. platform/terraform/modules/container-apps/outputs.tf
4. platform/terraform/modules/static-web-app/main.tf
5. platform/terraform/modules/static-web-app/variables.tf
6. platform/terraform/modules/static-web-app/outputs.tf
7. Makefile (simplified version)
8. platform/terraform/environments/dev/main.tf (updated)

================================================================================
PHASE 5: MIGRATION STEPS (Execution Order)
================================================================================

STEP 1: BACKUP & PREPARE
-------------------------
Commands:
  git checkout -b backup-aks-architecture
  git push origin backup-aks-architecture
  git checkout main
  git checkout -b migrate-to-container-apps

STEP 2: CREATE NEW TERRAFORM MODULES
-------------------------------------
1. Create platform/terraform/modules/container-apps/ directory
   - Write main.tf (Container Apps Environment + 3 apps)
   - Write variables.tf (inputs)
   - Write outputs.tf (API/processor URLs)

2. Create platform/terraform/modules/static-web-app/ directory
   - Write main.tf (Static Web Apps resource)
   - Write variables.tf (inputs)
   - Write outputs.tf (frontend URL)

3. Test syntax:
   cd platform/terraform/modules/container-apps
   terraform fmt
   terraform validate

STEP 3: UPDATE ENVIRONMENT CONFIG
----------------------------------
1. Modify platform/terraform/environments/dev/main.tf
   - Remove module "aks_cluster" block
   - Add module "container_apps" block
   - Add module "static_web_app" block
   - Update module connections

2. Update platform/terraform/environments/dev/variables.tf
   - Remove AKS-specific variables

3. Update platform/terraform/environments/dev/outputs.tf
   - Remove AKS outputs
   - Add Container Apps outputs
   - Add Static Web App outputs

4. Test plan:
   cd platform/terraform/environments/dev
   terraform init
   terraform plan

STEP 4: UPDATE SUPPORTING FILES
--------------------------------
1. Create new simplified Makefile
2. Update scripts/cloudDeployment/bootstrap.sh
3. Update scripts/cloudDeployment/setup_app_config.sh
4. Create scripts/cloudDeployment/deploy-container-apps.sh
5. Update documentation (README.md)

STEP 5: DELETE AKS RESOURCES
-----------------------------
Commands:
  rm -rf k8s-manifest/
  rm -rf platform/terraform/modules/aks/
  rm scripts/cloudDeployment/install-cert-manager.sh
  rm scripts/cloudDeployment/setup-ingress-controller.sh
  rm scripts/generalUtils/update-k8s-manifests.sh
  rm scripts/generalUtils/update-configmap.sh
  rm scripts/generalUtils/cost-management.sh
  rm scripts/generalUtils/restart-workload-identity.sh
  rm scripts/generalUtils/switch-architecture.sh
  rm scripts/localDevelopmentAutomation/apply-k8s-individual.sh

STEP 6: DEPLOY TO AZURE
------------------------
Commands:
  cd platform
  ./deploy.sh -e dev

Expected output:
  - Container Apps Environment created
  - 3 Container Apps deployed (API, Processor, Simulator)
  - Static Web App created
  - All outputs shown (URLs)

STEP 7: UPDATE DOCUMENTATION
-----------------------------
1. Update README.md
   - New architecture diagram
   - New deployment instructions
   - New cost estimates
   - Demo URLs

2. Update deployment guide
   - Simple one-command deployment
   - Remove K8s complexity

3. Add demo URLs to project
   - Frontend: https://finmon-webapp-dev.azurewebsites.net
   - API: https://finmon-api-dev.azurecontainerapps.io

STEP 8: TEST EVERYTHING
------------------------
1. Test API health:
   curl https://finmon-api-dev.azurecontainerapps.io/health

2. Test frontend:
   Open browser: https://finmon-webapp-dev.azurewebsites.net

3. Test transaction flow:
   - Start simulator
   - Check transactions in API
   - Verify anomaly detection

4. Test local development:
   make dev
   (Verify docker-compose still works)

STEP 9: COMMIT & PUSH
---------------------
Commands:
  git add .
  git commit -m "Migrate from AKS to Container Apps

  - Remove Kubernetes complexity (manifests, scripts, AKS module)
  - Add Container Apps module for simplified deployment
  - Add Static Web App module for frontend
  - Simplify Makefile (200+ lines → 50 lines)
  - Reduce deployment time (90 min → 10 min)
  - Reduce monthly cost ($120 → $35)
  - Enable one-click demo for recruiters

  Breaking changes:
  - Removed all K8s manifests and kubectl dependencies
  - Removed AKS-specific scripts
  - New deployment command: ./platform/deploy.sh -e dev

  Migration guide: See migration-plan.txt"

  git push origin migrate-to-container-apps

STEP 10: CREATE PULL REQUEST (optional)
----------------------------------------
Create PR from migrate-to-container-apps → main
Title: "Migrate to Container Apps for simplified deployment"
Description: Link to this migration plan

================================================================================
SUMMARY STATISTICS
================================================================================

┌─────────────────────┬──────────────────┬────────────────────────┐
│ Metric              │ Before (AKS)     │ After (Container Apps) │
├─────────────────────┼──────────────────┼────────────────────────┤
│ Terraform files     │ 19 files         │ 12 files               │
│ Scripts             │ 11 scripts       │ 4 scripts              │
│ K8s manifests       │ 13 YAML files    │ 0 files                │
│ Deployment steps    │ 8-10 manual      │ 1 command              │
│ Deployment time     │ 45-90 minutes    │ 10-15 minutes          │
│ Monthly cost        │ $120-150         │ $35-40                 │
│ Lines of config     │ ~1500 lines      │ ~500 lines             │
│ Manual DNS setup    │ YES ❌           │ NO ✅                  │
│ Manual SSL certs    │ YES ❌           │ NO ✅                  │
│ Recruiter can demo  │ NO ❌            │ YES ✅                 │
│ Scale to zero       │ NO ❌            │ YES ✅                 │
│ Built-in HTTPS      │ NO ❌            │ YES ✅                 │
└─────────────────────┴──────────────────┴────────────────────────┘

================================================================================
BENEFITS OF MIGRATION
================================================================================

FOR RECRUITING:
✅ Recruiter clicks URL → sees working app in 2 seconds
✅ No "sorry, it's expensive to keep running" excuses
✅ Always available (not shut down to save costs)
✅ Shows pragmatic architecture decisions
✅ Demonstrates cost optimization skills

FOR DEVELOPMENT:
✅ Deploy in 10 minutes vs 90 minutes
✅ One command: ./platform/deploy.sh -e dev
✅ No kubectl debugging
✅ No certificate issues
✅ No DNS configuration headaches

FOR INTERVIEWS:
✅ "I migrated from AKS to Container Apps and reduced costs by 70%"
✅ "I chose the right tool for the job - not over-engineering"
✅ "Container Apps provides the scalability without K8s complexity"
✅ Shows understanding of when NOT to use Kubernetes

FOR BUDGET:
✅ $35/month → Can keep running permanently
✅ $120/month → Need to shut down when not demoing
✅ Scale to zero → Pay only for actual usage
✅ Free tier Static Web Apps → $0 for frontend

================================================================================
RISKS & MITIGATION
================================================================================

RISK 1: Losing AKS knowledge demonstration
Mitigation: Keep backup branch, mention in README that you've worked with both

RISK 2: Container Apps limitations
Mitigation: For this workload, Container Apps is perfect (stateless, event-driven)

RISK 3: Migration takes longer than expected
Mitigation: Start with new modules first, test before deleting AKS

RISK 4: Breaking existing workflows
Mitigation: Update docker-compose for local dev (unchanged workflow)

================================================================================
NEXT STEPS
================================================================================

Ready to implement? Start with:

1. Create Container Apps module (main.tf, variables.tf, outputs.tf)
2. Create Static Web App module
3. Update dev environment config
4. Test terraform plan
5. Deploy!

Questions? Need specific file contents? Ask!

================================================================================
END OF MIGRATION PLAN
================================================================================
