#!/bin/bash
set -e

YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${YELLOW}Setting up Application Configuration${NC}"
echo "Populates Key Vault and creates .env file"
echo ""

read -p "Do you want to continue? (yes/no): " confirm
if [[ $confirm != "yes" ]]; then
    echo "Operation cancelled by user."
    exit 1
fi

echo -e "\n${YELLOW}--- Step 1: Verifying Prerequisites & Loading Config ---${NC}"
SECRETS_ENV_FILE=".env"
if [ ! -f "$SECRETS_ENV_FILE" ]; then
    echo -e "${YELLOW}Error: Configuration file '${SECRETS_ENV_FILE}' not found.${NC}" >&2
    exit 1
fi
source "./${SECRETS_ENV_FILE}"
echo -e "${GREEN}✓ Successfully loaded static config from '${SECRETS_ENV_FILE}'.${NC}"

if ! az account show >/dev/null 2>&1; then
    echo "ERROR: Not logged into Azure. Please run 'az login' first." >&2
    exit 1
fi
echo "Running script as Azure user: $(az account show --query "user.name" -o tsv)"

echo -e "\n${YELLOW}--- Step 2: Fetching Live Infrastructure Details from Terraform ---${NC}"
cd ./infra
KV_NAME=$(terraform output -raw key_vault_name)
KV_URI=$(terraform output -raw key_vault_uri)
AI_CS=$(terraform output -raw application_insights_connection_string)
COSMOS_URI=$(terraform output -raw cosmosdb_endpoint)
COSMOS_KEY=$(terraform output -raw cosmosdb_primary_key)
EH_CS=$(terraform output -raw eventhubs_namespace_connection_string)
EH_STORAGE_CS=$(terraform output -raw eventhub_checkpoint_storage_connection_string)
APP_IDENTITY_CLIENT_ID=$(terraform output -raw app_managed_identity_client_id)
REDIS_AZ=$(terraform output -raw redis_connection_string)
cd ..
echo -e "${GREEN}✓ Successfully retrieved infrastructure details from Terraform state.${NC}"

echo -e "\n${YELLOW}--- Step 3: Populating Secrets in Azure Key Vault ---${NC}"
az keyvault secret set --vault-name "$KV_NAME" --name "ApplicationInsights--ConnectionString" --value "$AI_CS" --output none
az keyvault secret set --vault-name "$KV_NAME" --name "CosmosDb--EndpointUri" --value "$COSMOS_URI" --output none
az keyvault secret set --vault-name "$KV_NAME" --name "CosmosDb--PrimaryKey" --value "$COSMOS_KEY" --output none
az keyvault secret set --vault-name "$KV_NAME" --name "EventHubs--ConnectionString" --value "$EH_CS" --output none
az keyvault secret set --vault-name "$KV_NAME" --name "EventHubs--BlobStorageConnectionString" --value "$EH_STORAGE_CS" --output none
az keyvault secret set --vault-name "$KV_NAME" --name "ApiSettings--ApiKey" --value "$API_KEY" --output none
if [ -n "$REDIS_AZ" ]; then
    az keyvault secret set --vault-name "$KV_NAME" --name "Redis--ConnectionString" --value "$REDIS_AZ" --output none
else
    echo "Skipping Redis connection string (stateless mode)"
fi
echo -e "${GREEN}✓ All application secrets have been set in Key Vault '${KV_NAME}'.${NC}"

PROJECT_ENV_FILE=".env"
echo -e "\n${YELLOW}--- Step 4: Creating/Updating '${PROJECT_ENV_FILE}' for Docker Compose ---${NC}"
cat >>"${PROJECT_ENV_FILE}" <<EOF
# This file was auto-generated by the setup_app_config.sh script.
# This file SHOULD be in .gitignore

KEY_VAULT_URI="${KV_URI}"

AZURE_CLIENT_ID="${APP_IDENTITY_CLIENT_ID}"
EOF
echo -e "${GREEN}✓ '${PROJECT_ENV_FILE}' created/updated successfully for Workload Identity.${NC}"

echo -e "\n${GREEN}✓ Application Configuration Complete${NC}"
echo ""
echo "Key Vault populated with secrets"
echo ".env file created for Workload Identity"
echo ""
echo "Next: Deploy to Kubernetes with kubectl apply -f k8s-manifest/"
