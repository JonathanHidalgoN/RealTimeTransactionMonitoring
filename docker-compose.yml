services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - financial_monitoring_network

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka:29092,LISTENER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CREATE_TOPICS: "transactions:1:1"
    networks:
      - financial_monitoring_network

  transactionsimulator:
    container_name: transaction_simulator
    build:
    #https://stackoverflow.com/questions/65622477/what-is-context-in-docker-compose
      context: .
      dockerfile: ./src/TransactionSimulator/Dockerfile.dev
    command: dotnet watch run --project ./src/TransactionSimulator/TransactionSimulator.csproj
    volumes:
      - ./src:/source/src
    working_dir: /source
    depends_on:
      - kafka
    environment:
      DOTNET_ENVIRONMENT: "Development"
      KEY_VAULT_URI: "${KEY_VAULT_URI}"
      AZURE_CLIENT_ID: "${AZURE_CLIENT_ID}"
      AZURE_CLIENT_SECRET: "${AZURE_CLIENT_SECRET}"
      AZURE_TENANT_ID: "${AZURE_TENANT_ID}"
      APPLICATIONINSIGHTS_CONNECTION_STRING: ""
      KAFKA_BOOTSTRAP_SERVERS: ""
      #Needed when using hot reload in docker
      #https://learn.microsoft.com/en-us/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-8.0
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
    networks:
      - financial_monitoring_network
    stdin_open: true
    tty: true

  transactionprocessor:
    container_name: transaction_processor
    build:
    #https://stackoverflow.com/questions/65622477/what-is-context-in-docker-compose
      context: .
      dockerfile: ./src/TransactionProcessor/Dockerfile.dev
    command: dotnet watch run --project ./src/TransactionProcessor/TransactionProcessor.csproj
    volumes:
      - ./src:/source/src
    working_dir: /source
    depends_on:
      kafka:
        condition: service_started
      cosmosdb-emulator:
        condition: service_healthy
    environment:
      DOTNET_ENVIRONMENT: "Development"
      KEY_VAULT_URI: "${KEY_VAULT_URI}"
      AZURE_CLIENT_ID: "${AZURE_CLIENT_ID}"
      AZURE_CLIENT_SECRET: "${AZURE_CLIENT_SECRET}"
      AZURE_TENANT_ID: "${AZURE_TENANT_ID}"
      APPLICATIONINSIGHTS_CONNECTION_STRING: ""
      KAFKA_BOOTSTRAP_SERVERS: ""
      CosmosDb__EndpointUri: ""
      CosmosDb__PrimaryKey: ""
      CosmosDb__DatabaseName: "${COSMOSDB_DATABASE_NAME}"
      CosmosDb__ContainerName: "${COSMOSDB_CONTAINER_NAME}"
      CosmosDb__PartitionKeyPath: "${COSMOSDB_PARTITION_KEY_PATH}"
      #Needed when using hot reload in docker
      #https://learn.microsoft.com/en-us/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-8.0
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
    networks:
      - financial_monitoring_network
    stdin_open: true
    tty: true

  #https://learn.microsoft.com/en-us/azure/cosmos-db/emulator-linux
  #https://blog.hungovercoders.com/datagriff/2024/06/29/cosmos-emulator-docker-local.html
  cosmosdb-emulator:
    container_name: cosmosdb-emulator
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    ports:
      - "8081:8081"
      - "10251:10251"
      - "10252:10252"
      - "10253:10253"
      - "10254:10254"
    environment:
      AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 1
      AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: "true"
    volumes:
      - cosmosdb_emulator_data:/tmp/cosmos/appdata
    networks:
      - financial_monitoring_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8081/_explorer/emulator.pem"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 50s

  financialmonitoring-api:
    container_name: financialmonitoring_api
    build:
      context: .
      dockerfile: ./src/FinancialMonitoring.Api/Dockerfile.dev
    command: dotnet watch run --no-launch-profile
    ports:
      - "5100:8080"
      # - "7100:8081" # HTTPS
    volumes:
      - ./src:/source/src
    working_dir: /source/src/FinancialMonitoring.Api
    environment:
      DOTNET_ENVIRONMENT: "Development"
      KEY_VAULT_URI: "${KEY_VAULT_URI}"
      AZURE_CLIENT_ID: "${AZURE_CLIENT_ID}"
      AZURE_CLIENT_SECRET: "${AZURE_CLIENT_SECRET}"
      AZURE_TENANT_ID: "${AZURE_TENANT_ID}"
      APPLICATIONINSIGHTS_CONNECTION_STRING: ""
      CosmosDb__EndpointUri: ""
      CosmosDb__PrimaryKey: ""
      CosmosDb__DatabaseName: "${COSMOSDB_DATABASE_NAME}"
      CosmosDb__ContainerName: "${COSMOSDB_CONTAINER_NAME}"
      CosmosDb__PartitionKeyPath: "${COSMOSDB_PARTITION_KEY_PATH}"
      # ASPNETCORE_URLS: "http://+:8080;https://+:8081"
      ASPNETCORE_URLS: "http://+:8080"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
    depends_on:
      cosmosdb-emulator:
        condition: service_healthy # API depends on the database emulator being ready
    networks:
      - financial_monitoring_network


networks:
  financial_monitoring_network:
    driver: bridge

volumes:
  cosmosdb_emulator_data: {}
