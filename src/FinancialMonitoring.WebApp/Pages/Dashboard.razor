@page "/dashboard"
@implements IDisposable
@using System.Timers
@using FinancialMonitoring.Models
@using FinancialMonitoring.WebApp.Services
@using FinancialMonitoring.WebApp.Models
@using System.Globalization
@inject ApiClientService ApiClient

<PageTitle>Real-Time Financial Monitoring Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-6">
        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-3" />
        Live Transaction Dashboard
    </MudText>

    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Class="ml-3">Loading analytics data...</MudText>
        </MudContainer>
    }
    else
    {
        <!-- System Overview Cards -->
        <MudGrid Spacing="3" Justify="Justify.FlexStart" Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="8" Class="pa-4" Style="height: 140px; background: linear-gradient(45deg, #2196F3, #21CBF3);">
                    <MudCardContent Class="pa-0">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h4" Style="color: white; font-weight: bold;">
                                    @(_analytics?.TotalTransactions.ToString("N0") ?? "0")
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.8);">
                                    Total Transactions
                                </MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Receipt" Style="color: rgba(255,255,255,0.8); font-size: 3rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="8" Class="pa-4" Style="height: 140px; background: linear-gradient(45deg, #FF5722, #FF9800);">
                    <MudCardContent Class="pa-0">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h4" Style="color: white; font-weight: bold;">
                                    @(_analytics?.TotalAnomalies.ToString("N0") ?? "0")
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.8);">
                                    Total Anomalies
                                </MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Security" Style="color: rgba(255,255,255,0.8); font-size: 3rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="8" Class="pa-4" Style="height: 140px; background: linear-gradient(45deg, #4CAF50, #8BC34A);">
                    <MudCardContent Class="pa-0">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h4" Style="color: white; font-weight: bold;">
                                    @((_analytics?.TotalVolume ?? 0).ToString("C2", CultureInfo.CurrentCulture))
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.8);">
                                    Total Volume
                                </MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Style="color: rgba(255,255,255,0.8); font-size: 3rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="8" Class="pa-4" Style="height: 140px; background: linear-gradient(45deg, #9C27B0, #E91E63);">
                    <MudCardContent Class="pa-0">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h4" Style="color: white; font-weight: bold;">
                                    @((_analytics?.AnomalyRate ?? 0).ToString("P1"))
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.8);">
                                    Anomaly Rate
                                </MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Style="color: rgba(255,255,255,0.8); font-size: 3rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Recent Activity Cards -->
        <MudGrid Spacing="3" Class="mb-6">
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="4" Class="pa-4" Style="height: 120px;">
                    <MudCardContent Class="pa-0">
                        <MudText Typo="Typo.h6" Class="mb-2">Last 24 Hours</MudText>
                        <div class="d-flex justify-space-between">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Primary">
                                    @(_analytics?.TransactionsLast24Hours.ToString("N0") ?? "0")
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">New Transactions</MudText>
                            </div>
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Error">
                                    @(_analytics?.AnomaliesLast24Hours.ToString("N0") ?? "0")
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">New Anomalies</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="4" Class="pa-4" Style="height: 120px;">
                    <MudCardContent Class="pa-0">
                        <MudText Typo="Typo.h6" Class="mb-2">System Health</MudText>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Success">
                                    @(_analytics?.UniqueAccounts.ToString("N0") ?? "0")
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Active Accounts</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Style="font-size: 2rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="4" Class="pa-4" Style="height: 120px;">
                    <MudCardContent Class="pa-0">
                        <MudText Typo="Typo.h6" Class="mb-2">Average Transaction</MudText>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h5" Color="Color.Info">
                                    @((_analytics?.AverageAmount ?? 0).ToString("C2", CultureInfo.CurrentCulture))
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Per Transaction</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Calculate" Color="Color.Info" Style="font-size: 2rem;" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Interactive Charts Section -->
        <MudGrid Spacing="3" Class="mb-6">
            <MudItem xs="12" lg="8">
                <MudCard Elevation="4" Class="pa-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Transaction Volume Trends (Last 24 Hours)</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton StartIcon="@Icons.Material.Filled.Refresh" 
                                      Variant="Variant.Text" 
                                      Color="Color.Primary" 
                                      OnClick="@RefreshChartData"
                                      Disabled="@_isLoadingCharts">
                                Refresh
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_isLoadingCharts)
                        {
                            <div class="d-flex justify-center align-center" style="height: 300px;">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            </div>
                        }
                        else if (_transactionTimeSeriesData != null && _transactionTimeSeriesData.Any())
                        {
                            <MudChart ChartType="ChartType.Line" 
                                     ChartSeries="@_chartSeries" 
                                     XAxisLabels="@_chartLabels" 
                                     Width="100%" 
                                     Height="350px"
                                     ChartOptions="@_chartOptions" />
                        }
                        else
                        {
                            <div class="d-flex justify-center align-center" style="height: 300px;">
                                <MudText Color="Color.Secondary">No time series data available</MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" lg="4">
                <MudCard Elevation="4" Class="pa-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">System Status Overview</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_analytics != null)
                        {
                            <MudChart ChartType="ChartType.Donut" 
                                     InputData="@_donutChartData" 
                                     InputLabels="@_donutChartLabels" 
                                     Width="100%" 
                                     Height="300px"
                                     LegendPosition="Position.Bottom" />
                        }
                        else
                        {
                            <div class="d-flex justify-center align-center" style="height: 300px;">
                                <MudText Color="Color.Secondary">Loading status data...</MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Enhanced Transaction Grid -->
        <MudCard Elevation="4" Class="pa-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Recent Transaction Activity</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton StartIcon="@Icons.Material.Filled.Search" 
                              Variant="Variant.Text" 
                              Color="Color.Primary"
                              Href="/analytics">
                        Advanced Analytics
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid @ref="_dataGrid"
                             T="Transaction"
                             ServerData="@(new Func<GridState<Transaction>, Task<GridData<Transaction>>>(ServerReload))"
                             Striped="true"
                             Hover="true"
                             Bordered="true"
                             Dense="true"
                             Class="mud-elevation-4">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="Transaction ID" Sortable="false">
                            <CellTemplate>
                                <MudText Typo="Typo.body2" Class="font-weight-medium">
                                    @context.Item.Id[^8..] <!-- Show last 8 characters -->
                                </MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Amount" Title="Amount" Sortable="false">
                            <CellTemplate>
                                <MudText Typo="Typo.body2" Class="@(context.Item.Amount > 1000 ? "font-weight-bold" : "")">
                                    @context.Item.Amount.ToString("C2", CultureInfo.CurrentCulture)
                                </MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Timestamp" Title="Date & Time" Sortable="false">
                            <CellTemplate>
                                <MudText Typo="Typo.body2">
                                    @DateTimeOffset.FromUnixTimeMilliseconds(context.Item.Timestamp).ToString("MMM dd, HH:mm")
                                </MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.MerchantName" Title="Merchant" Sortable="false">
                            <CellTemplate>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetMerchantIcon(context.Item.MerchantCategory)" Class="mr-2" Size="Size.Small" />
                                    <MudText Typo="Typo.body2">@context.Item.MerchantName</MudText>
                                </div>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SourceAccount.AccountId" Title="From Account" Sortable="false">
                            <CellTemplate>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    ***@context.Item.SourceAccount.AccountId[^4..] <!-- Mask account, show last 4 -->
                                </MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn Title="Status" Sortable="false">
                            <CellTemplate>
                                @if (!string.IsNullOrEmpty(context.Item.AnomalyFlag))
                                {
                                    <MudChip Text="@context.Item.AnomalyFlag" 
                                            Color="Color.Error" 
                                            Size="Size.Small" 
                                            Icon="@Icons.Material.Filled.Warning" />
                                }
                                else
                                {
                                    <MudChip Text="Normal" 
                                            Color="Color.Success" 
                                            Size="Size.Small" 
                                            Icon="@Icons.Material.Filled.CheckCircle" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Actions" Sortable="false">
                            <CellTemplate>
                                <MudButton StartIcon="@Icons.Material.Filled.Visibility" 
                                          Variant="Variant.Text" 
                                          Size="Size.Small"
                                          OnClick="@(() => ViewTransactionDetails(context.Item.Id))">
                                    Details
                                </MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="Transaction" PageSizeOptions="new int[] { 10, 20, 50 }" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    }

    <!-- Last Updated Info -->
    <MudContainer Class="d-flex justify-center mt-4">
        <MudText Typo="Typo.caption" Color="Color.Secondary">
            Last updated: @(_analytics != null ? DateTimeOffset.FromUnixTimeMilliseconds(_analytics.CalculatedAt).ToString("MMM dd, yyyy HH:mm UTC") : "Loading...")
            | Auto-refresh every @(AppConstants.DashboardRefreshInterval / 1000) seconds
        </MudText>
    </MudContainer>
</MudContainer>


@code {
    // --- Fields ---
    private bool _isLoading = true;
    private bool _isLoadingCharts = true;
    private TransactionAnalytics? _analytics;
    private List<TimeSeriesDataPoint>? _transactionTimeSeriesData;
    private List<TimeSeriesDataPoint>? _anomalyTimeSeriesData;

    private Timer? _timer;
    private MudDataGrid<Transaction>? _dataGrid;

    // Chart data
    private List<ChartSeries> _chartSeries = new();
    private string[] _chartLabels = Array.Empty<string>();
    private ChartOptions _chartOptions = new();
    private double[] _donutChartData = Array.Empty<double>();
    private string[] _donutChartLabels = Array.Empty<string>();

    // --- Lifecycle and Data Loading ---

    protected override async Task OnInitializedAsync()
    {
        await InitializeData();
        SetupTimer();
        SetupChartOptions();
    }

    private async Task InitializeData()
    {
        _isLoading = true;
        _isLoadingCharts = true;
        StateHasChanged();

        try
        {
            // Load analytics data and charts in parallel
            var analyticsTask = LoadAnalyticsData();
            var chartsTask = LoadChartData();

            await Task.WhenAll(analyticsTask, chartsTask);
        }
        finally
        {
            _isLoading = false;
            _isLoadingCharts = false;
            StateHasChanged();
        }
    }

    private async Task LoadAnalyticsData()
    {
        try
        {
            _analytics = await ApiClient.GetTransactionAnalyticsAsync();
            UpdateDonutChart();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics: {ex.Message}");
        }
    }

    private async Task LoadChartData()
    {
        try
        {
            var transactionSeriesTask = ApiClient.GetTransactionTimeSeriesAsync(24, 60);
            var anomalySeriesTask = ApiClient.GetAnomalyTimeSeriesAsync(24, 60);

            await Task.WhenAll(transactionSeriesTask, anomalySeriesTask);

            _transactionTimeSeriesData = await transactionSeriesTask;
            _anomalyTimeSeriesData = await anomalySeriesTask;

            UpdateChartData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chart data: {ex.Message}");
        }
    }

    private void UpdateChartData()
    {
        if (_transactionTimeSeriesData != null && _transactionTimeSeriesData.Any())
        {
            _chartLabels = _transactionTimeSeriesData
                .Select(d => DateTimeOffset.FromUnixTimeMilliseconds(d.Timestamp).ToString("HH:mm"))
                .ToArray();

            _chartSeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Transactions",
                    Data = _transactionTimeSeriesData.Select(d => d.Value).ToArray()
                }
            };

            if (_anomalyTimeSeriesData != null && _anomalyTimeSeriesData.Any())
            {
                _chartSeries.Add(new ChartSeries
                {
                    Name = "Anomalies",
                    Data = _anomalyTimeSeriesData.Select(d => d.Value).ToArray()
                });
            }
        }
    }

    private void UpdateDonutChart()
    {
        if (_analytics != null)
        {
            var normalTransactions = _analytics.TotalTransactions - _analytics.TotalAnomalies;
            _donutChartData = new double[] { normalTransactions, _analytics.TotalAnomalies };
            _donutChartLabels = new string[] { "Normal Transactions", "Anomalous Transactions" };
        }
    }

    private void SetupChartOptions()
    {
        _chartOptions = new ChartOptions
        {
            DisableLegend = false,
            YAxisLines = true,
            XAxisLines = false,
            YAxisTicks = 1000,
            MaxNumYAxisTicks = 5
        };
    }

    private void SetupTimer()
    {
        _timer = new Timer(AppConstants.DashboardRefreshInterval);
        _timer.Elapsed += async (sender, args) =>
        {
            await InvokeAsync(async () =>
            {
                // Reload analytics data
                await LoadAnalyticsData();
                
                // Reload the transaction grid
                if (_dataGrid is not null)
                {
                    await _dataGrid.ReloadServerData();
                }
            });
        };
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    // This method is the data source for the MudDataGrid
    private async Task<GridData<Transaction>> ServerReload(GridState<Transaction> state)
    {
        var pageNumber = state.Page + 1; // MudDataGrid is 0-indexed, our API is 1-indexed
        var pageSize = state.PageSize;

        var pagedResult = await ApiClient.GetTransactionsAsync(pageNumber, pageSize);

        if (pagedResult is not null)
        {
            return new GridData<Transaction>()
            {
                Items = pagedResult.Items,
                TotalItems = pagedResult.TotalCount
            };
        }

        return new GridData<Transaction>() { Items = new List<Transaction>(), TotalItems = 0 };
    }

    // --- Event Handlers ---

    private async Task RefreshChartData()
    {
        _isLoadingCharts = true;
        StateHasChanged();

        await LoadChartData();

        _isLoadingCharts = false;
        StateHasChanged();
    }

    private void ViewTransactionDetails(string transactionId)
    {
        // TODO: Implement transaction details modal/page
        Console.WriteLine($"Viewing details for transaction: {transactionId}");
    }

    private string GetMerchantIcon(MerchantCategory category)
    {
        return category switch
        {
            MerchantCategory.Grocery => Icons.Material.Filled.ShoppingCart,
            MerchantCategory.Gas => Icons.Material.Filled.LocalGasStation,
            MerchantCategory.Restaurant => Icons.Material.Filled.Restaurant,
            MerchantCategory.Retail => Icons.Material.Filled.Store,
            MerchantCategory.Entertainment => Icons.Material.Filled.MovieCreation,
            MerchantCategory.Healthcare => Icons.Material.Filled.LocalHospital,
            MerchantCategory.Travel => Icons.Material.Filled.Flight,
            MerchantCategory.OnlineServices => Icons.Material.Filled.Language,
            MerchantCategory.ATM => Icons.Material.Filled.Atm,
            _ => Icons.Material.Filled.Business
        };
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
