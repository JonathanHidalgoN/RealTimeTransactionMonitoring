@page "/dashboard"
@implements IDisposable
@using System.Timers
@using FinancialMonitoring.Models
@using FinancialMonitoring.WebApp.Services
@inject ApiClientService ApiClient

<PageTitle>Dashboard</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Live Transaction Dashboard</MudText>

<MudGrid Spacing="3" Justify="Justify.FlexStart" Class="mb-4">
    <MudItem xs="12" sm="4" md="3">
        <MudPaper Elevation="2" Class="pa-4" Height="100%">
            <MudText Typo="Typo.h6">@_totalTransactionsInDb.ToString("N0")</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Total Transactions (Est.)</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4" md="3">
        <MudPaper Elevation="2" Class="pa-4" Height="100%">
            <MudText Typo="Typo.h6" Color="Color.Error">@_anomalyCountInView.ToString("N0")</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Anomalies in View</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4" md="3">
        <MudPaper Elevation="2" Class="pa-4" Height="100%">
            <MudText Typo="Typo.h6">@_anomalyRateInView.ToString("P1")</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Anomaly Rate in View</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudPaper Elevation="2" Class="pa-4" Height="100%">
            <MudText Typo="Typo.subtitle1" GutterBottom="true">Status of Recent</MudText>
            <MudChart ChartType="ChartType.Pie" InputData="@_pieChartData" InputLabels="@_pieChartLabels" Height="150px" Width="100%" LegendPosition="Position.Bottom" />
        </MudPaper>
    </MudItem>
</MudGrid>

@* The MudDataGrid component now handles everything.
It shows a loading indicator automatically and will display its own "No items" message if the server returns an empty list.
*@
<MudDataGrid @ref="_dataGrid"
             T="Transaction"
             ServerData="@(new Func<GridState<Transaction>, Task<GridData<Transaction>>>(ServerReload))"
             Striped="true"
             Hover="true"
             Bordered="true"
             Dense="true">
<Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" Sortable="false" />
        <PropertyColumn Property="x => x.Amount" Title="Amount" Format="C" Sortable="false" />
        <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Sortable="false">
            <CellTemplate>
                @DateTimeOffset.FromUnixTimeMilliseconds(context.Item.Timestamp).ToString("g")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SourceAccount.AccountId" Title="Source Account" Sortable="false" />
        <PropertyColumn Property="x => x.DestinationAccount.AccountId" Title="Destination Account" Sortable="false" />
        <TemplateColumn Title="Status" Sortable="false">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.AnomalyFlag))
                {
                    <MudChip Text="@context.Item.AnomalyFlag" Color="Color.Error" Size="Size.Small" />
                }
                else
                {
                    <MudChip Text="Normal" Color="Color.Success" Size="Size.Small" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Transaction" PageSizeOptions="new int[] { 10, 20, 50 }" />
    </PagerContent>
</MudDataGrid>


@code {
    // --- Fields ---
    private int _totalTransactionsInDb = 0;
    private int _anomalyCountInView = 0;
    private double _anomalyRateInView = 0.0;
    private double[] _pieChartData = Array.Empty<double>();
    private string[] _pieChartLabels = Array.Empty<string>();

    private Timer? _timer;
    private MudDataGrid<Transaction>? _dataGrid; // Field to hold a reference to the DataGrid component

    // --- Lifecycle and Data Loading ---

    // This method is the data source for the MudDataGrid.
    // It's called automatically by the grid when it needs data (e.g., on page load, page change, or sort change).
    private async Task<GridData<Transaction>> ServerReload(GridState<Transaction> state)
    {
        var pageNumber = state.Page + 1; // MudDataGrid is 0-indexed, our API is 1-indexed
        var pageSize = state.PageSize;

        // Note: We are not yet passing sort information to the API. We will do that next.
        var pagedResult = await ApiClient.GetTransactionsAsync(pageNumber, pageSize);

        if (pagedResult is not null)
        {
            // Update the KPI cards based on the currently visible page of data.
            UpdateStats(pagedResult.Items);

            return new GridData<Transaction>()
            {
                Items = pagedResult.Items,
                TotalItems = pagedResult.TotalCount
            };
        }

        // Return empty data if the API call fails
        return new GridData<Transaction>() { Items = new List<Transaction>(), TotalItems = 0 };
    }

    private void UpdateStats(List<Transaction> transactions)
    {
        _totalTransactionsInDb = transactions.Count; // This will update with the page size for now
        _anomalyCountInView = transactions.Count(t => !string.IsNullOrEmpty(t.AnomalyFlag));
        _anomalyRateInView = (_totalTransactionsInDb > 0) ? ((double)_anomalyCountInView / _totalTransactionsInDb) : 0.0;

        var normalCount = _totalTransactionsInDb - _anomalyCountInView;
        _pieChartData = new double[] { normalCount, _anomalyCountInView };
        _pieChartLabels = new string[] { "Normal", "Anomalous" };

        // This tells Blazor to update the parts of the UI outside the grid (our KPI cards).
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _timer = new Timer(10000); // 10 seconds
        _timer.Elapsed += async (sender, args) =>
        {
            // When the timer ticks, tell the DataGrid to reload its data from the server.
            // We need to use InvokeAsync to safely update the UI from the timer's background thread.
            if (_dataGrid is not null)
            {
                await InvokeAsync(() => _dataGrid.ReloadServerData());
            }
        };
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
